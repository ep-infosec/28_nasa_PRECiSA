(bbiadp_atn_t
 (aeb_atn_t_pre2_predondition_j 0
  (aeb_atn_t_pre2_predondition_j-1 nil 3699981342
   ("" (expand "Precondition2?")
    (("" (skeep)
      (("" (expand "aeb_atn_t_pre2")
        (("" (flatten)
          (("" (split 1)
            (("1" (lemma "NonNeg_Incl")
              (("1" (inst? -1 :where 1)
                (("1" (inst? -1 :where -4) (("1" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (use "Abs_fundamental")
              (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Abs_fundamental formula-decl nil interval "interval_arith/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (Zeroin? const-decl "bool" interval "interval_arith/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (Abs const-decl "(NonNeg?)" interval "interval_arith/")
    (<< const-decl "bool" interval "interval_arith/")
    (lt const-decl "bool" interval "interval_arith/")
    (Ge const-decl "bool" interval "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (Proper_Abs application-judgement "ProperInterval" interval
     "interval_arith/")
    (NonNeg_Incl formula-decl nil interval "interval_arith/")
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (aeb_atn_t_pre2 const-decl "bool" bbiadp_atn_t nil)
    (Precondition2? const-decl "bool" interval "interval_arith/"))
   nil))
 (AEB_ATN_T_inclusion_j 0
  (AEB_ATN_T_inclusion_j-1 nil 3699976467
   ("" (expand "Inclusion2?")
    (("" (skeep*)
      (("" (expand "aebounddp_atn_t_ia")
        (("" (expand "aebounddp_atn_t_safe")
          (("" (lift-if)
            (("" (split)
              (("1" (flatten)
                (("1" (expand "aebounddp_atn_t")
                  (("1" (use "Add_inclusion")
                    (("1" (split -1)
                      (("1" (propax) nil nil)
                       ("2" (hide 2)
                        (("2" (expand "atn_t_aerr_bound")
                          (("2" (use "Div_inclusion")
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (split 1)
                                  (("1"
                                    (use "Add_inclusion")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (split 1)
                                          (("1" (eval-formula) nil nil)
                                           ("2"
                                            (use "Min_inclusion")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (split 1)
                                                  (("1"
                                                    (use "expt_x2")
                                                    (("1"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (use
                                                         "Mult_inclusion")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (use
                                                               "Sub_inclusion")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use "expt_x2")
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (use
                                                         "Mult_inclusion")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (use
                                                               "Add_inclusion")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "Pos_Zeroless")
                                    (("2"
                                      (inst? -1 :where 1)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (lemma "Pos_Add_NonNeg")
                                          (("2"
                                            (inst? -1 :where 1)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (use "NonNeg_Min")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (use
                                                         "Pos_NonNeg")
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (typepred
                                                             "X2")
                                                            (("1"
                                                              (expand
                                                               "aeb_atn_t_pre2")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "Zeroless?(X1)")
                                                                  (("1"
                                                                    (case
                                                                     "Pos?(X1)")
                                                                    (("1"
                                                                      (use
                                                                       "Pos_Mult")
                                                                      (("1"
                                                                        (hide
                                                                         2)
                                                                        (("1"
                                                                          (case
                                                                           "Abs(X1) = X1")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "Neg?(X1)")
                                                                      (("1"
                                                                        (use
                                                                         "Neg_Mult")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "Proper?(X1)")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-2
                                                                      -1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "Pos_NonNeg")
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (typepred
                                                             "X2")
                                                            (("2"
                                                              (expand
                                                               "aeb_atn_t_pre2")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (case
                                                                   "Zeroless?(X1)")
                                                                  (("1"
                                                                    (case
                                                                     "Pos?(X1)")
                                                                    (("1"
                                                                      (use
                                                                       "Pos_Mult")
                                                                      (("1"
                                                                        (hide
                                                                         2)
                                                                        (("1"
                                                                          (case
                                                                           "Abs(X1) = X1")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "Neg?(X1)")
                                                                      (("1"
                                                                        (use
                                                                         "Neg_Mult")
                                                                        (("1"
                                                                          (hide
                                                                           3)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "Proper?(X1)")
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (1
                                                                            2
                                                                            -1
                                                                            -2))
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (use "Div_inclusion")
                          (("3" (assert)
                            (("3" (hide 2)
                              (("3"
                                (split)
                                (("1"
                                  (expand "atn_ulp_bound")
                                  (("1"
                                    (use "Ulp_dp_inclusion")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (use "Atan_inclusion")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use "Add_inclusion")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use "Abs_inclusion")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (eval-formula) nil nil)
                                 ("3" (eval-formula) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (hide 2)
                  (("2" (typepred "X2")
                    (("2" (expand "aeb_atn_t_pre2")
                      (("2" (flatten) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (aebounddp_atn_t_safe const-decl "real" bbiadp_atn_t nil)
    (aebounddp_atn_t const-decl "nonneg_real" aerr754dp_atn "float/")
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Sub_inclusion formula-decl nil interval "interval_arith/")
    (Mult_inclusion formula-decl nil interval "interval_arith/")
    (expt_x2 formula-decl nil exponentiation nil)
    (Min_inclusion formula-decl nil interval "interval_arith/")
    (Pos_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Pos? const-decl "bool" interval "interval_arith/")
    (X1 skolem-const-decl "(Any?)" bbiadp_atn_t nil)
    (X2 skolem-const-decl "{X2: Interval | aeb_atn_t_pre2(X1, X2)}"
     bbiadp_atn_t nil)
    (Pos_Add_NonNeg judgement-tcc nil interval "interval_arith/")
    (Zeroless? const-decl "bool" interval "interval_arith/")
    (Neg? const-decl "bool" interval "interval_arith/")
    (minus_real_is_real application-judgement "real" reals nil)
    (Lt const-decl "bool" interval "interval_arith/")
    (pXp const-decl "Interval" interval "interval_arith/")
    (Le const-decl "bool" interval "interval_arith/")
    (Neg const-decl "Interval" interval "interval_arith/")
    (nXp const-decl "Interval" interval "interval_arith/")
    (pXn const-decl "Interval" interval "interval_arith/")
    (pXm const-decl "Interval" interval "interval_arith/")
    (nXn const-decl "Interval" interval "interval_arith/")
    (nXm const-decl "Interval" interval "interval_arith/")
    (mXp const-decl "Interval" interval "interval_arith/")
    (mXn const-decl "Interval" interval "interval_arith/")
    (mXm const-decl "Interval" interval "interval_arith/")
    (Neg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Neg_Mult judgement-tcc nil interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (Pos_Mult judgement-tcc nil interval "interval_arith/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Gt const-decl "bool" interval "interval_arith/")
    (Ge const-decl "bool" interval "interval_arith/")
    (lt const-decl "bool" interval "interval_arith/")
    (|##| const-decl "bool" interval "interval_arith/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (Zeroin? const-decl "bool" interval "interval_arith/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Pos_NonNeg judgement-tcc nil interval "interval_arith/")
    (NonNeg_Min formula-decl nil interval "interval_arith/")
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Pos_Zeroless judgement-tcc nil interval "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Div_inclusion formula-decl nil interval "interval_arith/")
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (Abs_inclusion formula-decl nil interval "interval_arith/")
    (Atan_inclusion formula-decl nil interval_trig "interval_arith/")
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan
          "trig/")
    (tan_restrict const-decl "real" trig_basic "trig/")
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types "trig/")
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (cos const-decl "real" sincos_def "trig/")
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (Ulp_dp_inclusion formula-decl nil interval_ulp_dp nil)
    (Ulp_dp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_dp))"
     interval_ulp_dp nil)
    (Ulp_dp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_dp nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) |
         rounded_mode?(double_precision_format)(round)}" ieee754dp
     "float/")
    (dp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](double_precision_format)" ieee754dp
     "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (x2 skolem-const-decl "real" bbiadp_atn_t nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Div const-decl "Interval" interval "interval_arith/")
    (aeb_atn_t_pre2 const-decl "bool" bbiadp_atn_t nil)
    (Any? const-decl "bool" interval "interval_arith/")
    (Add const-decl "Interval" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Min const-decl "Interval" interval "interval_arith/")
    (Mult const-decl "Interval" interval "interval_arith/")
    (Sub const-decl "Interval" interval "interval_arith/")
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Atan const-decl "Interval" interval_trig "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (Abs const-decl "(NonNeg?)" interval "interval_arith/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (float type-eq-decl nil float "float/")
    (Fbounded? const-decl "bool" float "float/")
    (dp_closest? const-decl "bool" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (atn_t_aerr_bound const-decl "nonneg_real" accum_err_atn "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (ulp_dp const-decl "nonneg_real" ieee754dp "float/")
    (atn_ulp_bound const-decl "real" accum_err_atn "float/")
    (Add_inclusion formula-decl nil interval "interval_arith/")
    (aebounddp_atn_t_ia const-decl "Interval" bbiadp_atn_t nil)
    (Inclusion2? const-decl "bool" interval "interval_arith/"))
   nil))
 (AEB_ATN_T_fundmental_j 0
  (AEB_ATN_T_fundmental_j-1 nil 3699976467
   ("" (expand "Fundamental2?")
    (("" (skeep*)
      (("" (case "Proper?(X)")
        (("1" (expand "Proper?")
          (("1" (case "Proper?(Y)")
            (("1" (expand "Proper?")
              (("1" (assert)
                (("1" (expand "aebounddp_atn_t_ia")
                  (("1" (lift-if 1)
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (use "Add_fundamental")
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (split 1)
                                (("1"
                                  (use "Div_fundamental")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (use "Add_fundamental")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (use "Min_fundamental")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (use
                                                         "Mult_fundamental")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (use
                                                                 "Sub_fundamental")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "Sub_fundamental")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "Mult_fundamental")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (use
                                                               "Add_fundamental")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "aeb_atn_t_pre2")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide -1 -2)
                                              (("2"
                                                (typepred "Y")
                                                (("2"
                                                  (expand
                                                   "aeb_atn_t_pre2")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (lemma
                                                       "Pos_Zeroless")
                                                      (("2"
                                                        (inst?
                                                         -1
                                                         :where
                                                         1)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (lemma
                                                             "Pos_Add_NonNeg")
                                                            (("2"
                                                              (inst?
                                                               -1
                                                               :where
                                                               1)
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (use
                                                                   "NonNeg_Min")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (use
                                                                           "Pos_NonNeg")
                                                                          (("1"
                                                                            (hide
                                                                             2)
                                                                            (("1"
                                                                              (case
                                                                               "Zeroless?(X)")
                                                                              (("1"
                                                                                (case
                                                                                 "Pos?(X)")
                                                                                (("1"
                                                                                  (use
                                                                                   "Pos_Mult")
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (case
                                                                                       "Abs(X) = X")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         :hide?
                                                                                         t)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "Neg?(X)")
                                                                                  (("1"
                                                                                    (use
                                                                                     "Neg_Mult")
                                                                                    (("1"
                                                                                      (hide
                                                                                       3)
                                                                                      (("1"
                                                                                        (case
                                                                                         "Abs(X) = X")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           :hide?
                                                                                           t)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (use
                                                                           "Pos_NonNeg")
                                                                          (("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (case
                                                                               "Zeroless?(X)")
                                                                              (("1"
                                                                                (case
                                                                                 "Pos?(X)")
                                                                                (("1"
                                                                                  (use
                                                                                   "Pos_Mult")
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (case
                                                                                       "Abs(X) = X")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         :hide?
                                                                                         t)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "Neg?(X)")
                                                                                  (("1"
                                                                                    (use
                                                                                     "Neg_Mult")
                                                                                    (("1"
                                                                                      (hide
                                                                                       3)
                                                                                      (("1"
                                                                                        (case
                                                                                         "Abs(X) = Neg(X)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           :hide?
                                                                                           t)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "Div_fundamental")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (use "Ulp_dp_proper")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (use "Ulp_dp_fundamental")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (use
                                                 "Atan_fundamental")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (use
                                                       "Add_fundamental")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (use
                                                             "Abs_fundamental")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (eval-formula) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 2)
                          (("2" (expand "aeb_atn_t_pre2")
                            (("2" (typepred "Y")
                              (("2"
                                (expand "aeb_atn_t_pre2")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (split 1)
                                    (("1"
                                      (typepred "Y1")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (typepred "Y1")
                                      (("2"
                                        (use "Abs_fundamental")
                                        (("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (1 -3))
              (("2" (typepred "Y1")
                (("2" (expand "Proper?") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (typepred "X1")
            (("2" (expand "Proper?") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (aebounddp_atn_t_ia const-decl "Interval" bbiadp_atn_t nil)
    (Add_fundamental formula-decl nil interval "interval_arith/")
    (Abs const-decl "(NonNeg?)" interval "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (Atan const-decl "Interval" interval_trig "interval_arith/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil)
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (Sub const-decl "Interval" interval "interval_arith/")
    (Mult const-decl "Interval" interval "interval_arith/")
    (Min const-decl "Interval" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Add const-decl "Interval" interval "interval_arith/")
    (Div const-decl "Interval" interval "interval_arith/")
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (Ulp_dp_fundamental formula-decl nil interval_ulp_dp nil)
    (Abs_fundamental formula-decl nil interval "interval_arith/")
    (Atan_fundamental formula-decl nil interval_trig "interval_arith/")
    (Ulp_dp_proper formula-decl nil interval_ulp_dp nil)
    (Div_fundamental formula-decl nil interval "interval_arith/")
    (Pos_Zeroless judgement-tcc nil interval "interval_arith/")
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (NonNeg_Min formula-decl nil interval "interval_arith/")
    (Pos_NonNeg judgement-tcc nil interval "interval_arith/")
    (Zeroless? const-decl "bool" interval "interval_arith/")
    (Neg? const-decl "bool" interval "interval_arith/")
    (Lt const-decl "bool" interval "interval_arith/")
    (Neg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Neg_Mult judgement-tcc nil interval "interval_arith/")
    (mXm const-decl "Interval" interval "interval_arith/")
    (mXn const-decl "Interval" interval "interval_arith/")
    (mXp const-decl "Interval" interval "interval_arith/")
    (nXm const-decl "Interval" interval "interval_arith/")
    (nXn const-decl "Interval" interval "interval_arith/")
    (pXm const-decl "Interval" interval "interval_arith/")
    (pXn const-decl "Interval" interval "interval_arith/")
    (nXp const-decl "Interval" interval "interval_arith/")
    (Neg const-decl "Interval" interval "interval_arith/")
    (Le const-decl "bool" interval "interval_arith/")
    (pXp const-decl "Interval" interval "interval_arith/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Pos_Mult judgement-tcc nil interval "interval_arith/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Gt const-decl "bool" interval "interval_arith/")
    (Ge const-decl "bool" interval "interval_arith/")
    (lt const-decl "bool" interval "interval_arith/")
    (<< const-decl "bool" interval "interval_arith/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (Zeroin? const-decl "bool" interval "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Pos_Add_NonNeg judgement-tcc nil interval "interval_arith/")
    (Y skolem-const-decl "{Y: Interval | aeb_atn_t_pre2(X, Y)}"
     bbiadp_atn_t nil)
    (X skolem-const-decl "(Any?)" bbiadp_atn_t nil)
    (Pos? const-decl "bool" interval "interval_arith/")
    (Pos_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Sub_fundamental formula-decl nil interval "interval_arith/")
    (Mult_fundamental formula-decl nil interval "interval_arith/")
    (Min_fundamental formula-decl nil interval "interval_arith/")
    (Incl_reflx formula-decl nil interval "interval_arith/")
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (aeb_atn_t_pre2_predondition_j name-judgement "(Precondition2?)"
     bbiadp_atn_t nil)
    (Proper_Add application-judgement "ProperInterval" interval
     "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (Proper_Min application-judgement "ProperInterval" interval
     "interval_arith/")
    (Proper_Mult application-judgement "ProperInterval" interval
     "interval_arith/")
    (Proper_Sub application-judgement "ProperInterval" interval
     "interval_arith/")
    (Ulp_dp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_dp))"
     interval_ulp_dp nil)
    (Ulp_dp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_dp nil)
    (Proper_Atan application-judgement "ProperInterval" interval_trig
     "interval_arith/")
    (Proper_Abs application-judgement "ProperInterval" interval
     "interval_arith/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AEB_ATN_T_inclusion_j application-judgement
     "(Inclusion2?(Any?, aeb_atn_t_pre2, aebounddp_atn_t_safe))"
     bbiadp_atn_t nil)
    (aeb_atn_t_pre2 const-decl "bool" bbiadp_atn_t nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (Any? const-decl "bool" interval "interval_arith/")
    (Fundamental2? const-decl "bool" interval "interval_arith/"))
   nil))
 (AEB_ATN_T_TCC1 0
  (AEB_ATN_T_TCC1-1 nil 3699976467 ("" (subtype-tcc) nil nil)
   ((AEB_ATN_T_fundmental_j application-judgement
     "(Fundamental2?(Any?, aeb_atn_t_pre2))" bbiadp_atn_t nil)
    (AEB_ATN_T_inclusion_j application-judgement
     "(Inclusion2?(Any?, aeb_atn_t_pre2, aebounddp_atn_t_safe))"
     bbiadp_atn_t nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)))

