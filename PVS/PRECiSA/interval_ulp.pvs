interval_ulp[
   F       : TYPE,
   F2R     : [F->real],
   R2F     : [real->F],
   min_ulp : nonneg_real,
   ulp     : [real->nonneg_real]
]: THEORY
BEGIN
  ASSUMING
    f1   : VAR F
    r1,r2: VAR real

    ulp_abs: ASSUMPTION
      ulp(abs(r1))=ulp(r1)
    
    ulp_monotone: ASSUMPTION
      0 <= r1 AND r1 <= r2
      IMPLIES ulp(r1) <= ulp(r2)

    ulp_min: ASSUMPTION
      min_ulp <= ulp(r1)
  ENDASSUMING

  IMPORTING interval_arith@interval_expr

  n: VAR nat
  I: VAR Interval
  x: VAR real

  Ulp(I): Interval =
    IF NonNeg?(I) THEN [| ulp(lb(I)) , ulp(ub(I)) |]
    ELSIF Neg?(I) THEN [| ulp(ub(I)) , ulp(lb(I)) |]
    ELSE  [| min_ulp, max(ulp(ub(I)) , ulp(lb(I))) |] ENDIF

  X,Y: VAR Interval

  Ulp_proper: LEMMA
    Proper?(X) IMPLIES Proper?(Ulp(X))

  Ulp_inclusion : LEMMA
    x ## X IMPLIES 
    ulp(x) ## Ulp(X)

  Ulp_fundamental : LEMMA
    Proper?(X) AND
    X << Y IMPLIES
    Ulp(X) << Ulp(Y)

  Ulp_Inclusion : JUDGEMENT
    Ulp HAS_TYPE (Inclusion?(PreTrue,ulp))

  Ulp_Fundamental : JUDGEMENT
    Ulp HAS_TYPE (Fundamental?(PreTrue))

    
  IMPORTING interval_expr
 
  ULP(expr: RealExpr): RealExpr = FUN(PreTrue,ulp,Ulp,expr)

END interval_ulp
