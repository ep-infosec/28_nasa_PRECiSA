(interval_ulp
 (Ulp_proper 0
  (Ulp_proper-1 nil 3683989838
   ("" (skeep)
    (("" (expand "Proper?")
      (("" (expand "Ulp")
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "[||]")
                (("1" (use "ulp_monotone")
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split 2)
                (("1" (flatten)
                  (("1" (expand "[||]")
                    (("1" (use "ulp_abs")
                      (("1" (replace -1 :hide? t :dir rl)
                        (("1" (lemma "ulp_abs")
                          (("1" (inst -1 "lb(X)")
                            (("1" (replace -1 :hide? t :dir rl)
                              (("1"
                                (case "abs(ub(X)) <= abs(lb(X))")
                                (("1"
                                  (hide -3)
                                  (("1"
                                    (use "ulp_monotone")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "[||]")
                    (("2" (use "ulp_min") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Proper? const-decl "bool" interval "interval_arith/")
    (ulp_min formula-decl nil interval_ulp nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (ulp_abs formula-decl nil interval_ulp nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (Lt const-decl "bool" interval "interval_arith/")
    (Neg? const-decl "bool" interval "interval_arith/")
    (minus_real_is_real application-judgement "real" reals nil)
    (Neg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ulp_monotone formula-decl nil interval_ulp nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Ge const-decl "bool" interval "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Ulp const-decl "Interval" interval_ulp nil))
   shostak))
 (Ulp_inclusion 0
  (Ulp_inclusion-1 nil 3682781356
   ("" (skeep)
    (("" (expand "Ulp")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten)
            (("1" (expand "NonNeg?")
              (("1" (expand "Ge")
                (("1" (flatten)
                  (("1" (expand "##")
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (hide -4)
                          (("1" (expand "[||]")
                            (("1" (use "ulp_monotone")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "[||]")
                          (("2" (use "ulp_monotone")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (split 2)
              (("1" (flatten)
                (("1" (hide 2)
                  (("1" (expand "Neg?")
                    (("1" (expand "Lt")
                      (("1" (flatten)
                        (("1" (expand "##")
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "[||]")
                                (("1"
                                  (use "ulp_abs")
                                  (("1"
                                    (replace -1 :hide? t :dir rl)
                                    (("1"
                                      (lemma "ulp_abs")
                                      (("1"
                                        (inst? -1 ("r1" "x"))
                                        (("1"
                                          (replace -1 :hide? t :dir rl)
                                          (("1"
                                            (use "ulp_monotone")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide-all-but
                                                 (1 -2 -4))
                                                (("1"
                                                  (expand "abs")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "[||]")
                                (("2"
                                  (use "ulp_abs")
                                  (("2"
                                    (replace -1 :hide? t :dir rl)
                                    (("2"
                                      (lemma "ulp_abs")
                                      (("2"
                                        (inst? -1 ("r1" "lb(X)"))
                                        (("2"
                                          (replace -1 :hide? t :dir rl)
                                          (("2"
                                            (use "ulp_monotone")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but
                                                 (1 -1 -3))
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "NonNeg?")
                  (("2" (expand "Neg?")
                    (("2" (expand "Ge")
                      (("2" (expand "Lt")
                        (("2" (case "lb(X)<0 AND ub(X) >=0")
                          (("1" (hide 1 3)
                            (("1" (expand "##")
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "[||]")
                                    (("1" (use "ulp_min") nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "[||]")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "max")
                                      (("2"
                                        (lift-if 1)
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case "0<=x")
                                              (("1"
                                                (lemma "ulp_monotone")
                                                (("1"
                                                  (inst?
                                                   -1
                                                   ("r2"
                                                    "ub(X)"
                                                    "r1"
                                                    "x"))
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1)
                                                (("2"
                                                  (use "ulp_abs")
                                                  (("2"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (lemma "ulp_abs")
                                                      (("2"
                                                        (inst?
                                                         -1
                                                         ("r1"
                                                          "lb(X)"))
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (use
                                                             "ulp_monotone")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "abs")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (case "0 <= x")
                                              (("1"
                                                (use "ulp_monotone")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (use "ulp_abs")
                                                (("2"
                                                  (replace
                                                   -1
                                                   :hide?
                                                   t
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (lemma "ulp_abs")
                                                    (("2"
                                                      (inst?
                                                       -1
                                                       ("r1" "lb(X)"))
                                                      (("2"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (lemma
                                                           "ulp_abs")
                                                          (("2"
                                                            (inst?
                                                             -1
                                                             ("r1"
                                                              "x"))
                                                            (("2"
                                                              (replace
                                                               -1
                                                               :hide?
                                                               t
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (lemma
                                                                 "ulp_monotone")
                                                                (("2"
                                                                  (inst?
                                                                   -1
                                                                   ("r2"
                                                                    "abs(lb(X))"
                                                                    "r1"
                                                                    "abs(x)"))
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "abs")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 3) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Ulp const-decl "Interval" interval_ulp nil)
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (ulp_monotone formula-decl nil interval_ulp nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (|##| const-decl "bool" interval "interval_arith/")
    (Ge const-decl "bool" interval "interval_arith/")
    (Lt const-decl "bool" interval "interval_arith/")
    (ulp_abs formula-decl nil interval_ulp nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (minus_real_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (Neg? const-decl "bool" interval "interval_arith/")
    (< const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (ulp_min formula-decl nil interval_ulp nil))
   shostak))
 (Ulp_fundamental 0
  (Ulp_fundamental-1 nil 3682793475
   ("" (skeep)
    (("" (case "NonNeg?(Y)")
      (("1" (case "NonNeg?(X)")
        (("1" (expand "Ulp")
          (("1" (assert)
            (("1" (expand "<<")
              (("1" (expand "[||]")
                (("1" (flatten)
                  (("1" (split)
                    (("1" (expand "NonNeg?")
                      (("1" (expand "Ge")
                        (("1" (flatten)
                          (("1" (use "ulp_monotone")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "NonNeg?")
                      (("2" (expand "Ge")
                        (("2" (flatten)
                          (("2" (use "ulp_monotone")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but (-1 -3 -2 1)) (("2" (grind) nil nil)) nil))
        nil)
       ("2" (case "Neg?(Y)")
        (("1" (case "Neg?(X)")
          (("1" (expand "Ulp")
            (("1" (assert)
              (("1" (lift-if 2)
                (("1" (split 2)
                  (("1" (flatten)
                    (("1" (hide-all-but (-1 -2))
                      (("1" (grind) nil nil)) nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "[||]")
                      (("2" (expand "<<")
                        (("2" (expand "Neg?")
                          (("2" (expand "Lt")
                            (("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (lemma "ulp_abs")
                                  (("1"
                                    (inst? -1 :where 1)
                                    (("1"
                                      (replace -1 :hide? t :dir rl)
                                      (("1"
                                        (lemma "ulp_abs")
                                        (("1"
                                          (inst? -1 ("r1" "ub(X)"))
                                          (("1"
                                            (replace
                                             -1
                                             :hide?
                                             t
                                             :dir
                                             rl)
                                            (("1"
                                              (use "ulp_monotone")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "abs")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "ulp_abs")
                                  (("2"
                                    (inst? -1 :where 1)
                                    (("2"
                                      (replace -1 :hide? t :dir rl)
                                      (("2"
                                        (lemma "ulp_abs")
                                        (("2"
                                          (inst? -1 ("r1" "lb(Y)"))
                                          (("2"
                                            (replace
                                             -1
                                             :hide?
                                             t
                                             :dir
                                             rl)
                                            (("2"
                                              (use "ulp_monotone")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but (-1 -2 -3 1)) (("2" (grind) nil nil))
            nil))
          nil)
         ("2" (expand "Ulp")
          (("2" (assert)
            (("2" (lift-if 3)
              (("2" (split 3)
                (("1" (flatten)
                  (("1" (expand "max")
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (expand "<<")
                            (("1" (expand "[||]")
                              (("1"
                                (split 1)
                                (("1" (use "ulp_min") nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lemma "ulp_monotone")
                                    (("2"
                                      (inst?
                                       -1
                                       ("r1" "ub(X)" "r2" "ub(Y)"))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "NonNeg?")
                                          (("2"
                                            (expand "Ge")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "<<")
                            (("2" (expand "[||]")
                              (("2"
                                (split 2)
                                (("1" (use "ulp_min") nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (use "ulp_monotone")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "NonNeg?")
                                        (("2"
                                          (expand "Ge")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (expand "<<")
                        (("1" (expand "[||]")
                          (("1" (split 1)
                            (("1" (use "ulp_min") nil nil)
                             ("2" (expand "max")
                              (("2"
                                (lift-if 1)
                                (("2"
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (lemma "ulp_abs")
                                      (("1"
                                        (inst? -1 ("r1" "lb(X)"))
                                        (("1"
                                          (replace -1 :hide? t :dir rl)
                                          (("1"
                                            (lemma "ulp_abs")
                                            (("1"
                                              (inst? -1 ("r1" "lb(Y)"))
                                              (("1"
                                                (replace
                                                 -1
                                                 :hide?
                                                 t
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (case
                                                   "abs(lb(X)) <= abs(lb(Y))")
                                                  (("1"
                                                    (use
                                                     "ulp_monotone")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1 -4 -2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (lemma "ulp_abs")
                                      (("2"
                                        (inst? -1 ("r1" "ub(Y)"))
                                        (("2"
                                          (replace -1 :hide? t :dir rl)
                                          (("2"
                                            (lemma "ulp_abs")
                                            (("2"
                                              (inst? -1 ("r1" "lb(Y)"))
                                              (("2"
                                                (replace
                                                 -1
                                                 :hide?
                                                 t
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (lemma "ulp_abs")
                                                  (("2"
                                                    (inst?
                                                     -1
                                                     ("r1" "lb(X)"))
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (lemma
                                                         "ulp_monotone")
                                                        (("2"
                                                          (inst?
                                                           -1
                                                           ("r1"
                                                            "abs(lb(X))"
                                                            "r2"
                                                            "abs(lb(Y))"))
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide-all-but
                                                               (1
                                                                -1
                                                                -3))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "<<")
                        (("2" (expand "[||]")
                          (("2" (expand "max")
                            (("2" (lift-if 2)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lift-if 1)
                                    (("1"
                                      (case "NOT Proper?(Y)")
                                      (("1"
                                        (hide-all-but (1 -2 -3 -4))
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (case
                                             "ulp(lb(X)) <= ulp(lb(Y))")
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma "ulp_abs")
                                                (("2"
                                                  (inst?
                                                   -1
                                                   ("r1" "lb(X)"))
                                                  (("2"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (lemma "ulp_abs")
                                                      (("2"
                                                        (inst?
                                                         -1
                                                         ("r1"
                                                          "ub(X)"))
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (lemma
                                                             "ulp_abs")
                                                            (("2"
                                                              (inst?
                                                               -1
                                                               ("r1"
                                                                "lb(Y)"))
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (lemma
                                                                   "ulp_monotone")
                                                                  (("2"
                                                                    (inst?
                                                                     -1
                                                                     ("r1"
                                                                      "abs(lb(X))"
                                                                      "r2"
                                                                      "abs(lb(Y))"))
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          3
                                                                          4
                                                                          5
                                                                          6
                                                                          -6
                                                                          -2
                                                                          -4))
                                                                        (("2"
                                                                          (case
                                                                           "NOT lb(Y) <= 0")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "NOT lb(X) <= 0")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (case
                                             "ulp(lb(X)) <= ulp(lb(Y))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2 3 -5)
                                              (("2"
                                                (lemma "ulp_abs")
                                                (("2"
                                                  (inst?
                                                   -1
                                                   ("r1" "lb(X)"))
                                                  (("2"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (lemma "ulp_abs")
                                                      (("2"
                                                        (inst?
                                                         -1
                                                         ("r1"
                                                          "ub(X)"))
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (lemma
                                                             "ulp_abs")
                                                            (("2"
                                                              (inst?
                                                               -1
                                                               ("r1"
                                                                "lb(Y)"))
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (lemma
                                                                   "ulp_monotone")
                                                                  (("2"
                                                                    (inst?
                                                                     -1
                                                                     ("r1"
                                                                      "abs(lb(X))"
                                                                      "r2"
                                                                      "abs(lb(Y))"))
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          3
                                                                          4
                                                                          5
                                                                          6
                                                                          -4
                                                                          -1
                                                                          -3))
                                                                        (("2"
                                                                          (case
                                                                           "NOT lb(Y) <= 0")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "NOT lb(X) <= 0")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lift-if 2)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (case
                                           "ulp(ub(X)) <= ulp(ub(Y))")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2 3 -1)
                                            (("2"
                                              (use "ulp_monotone")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide-all-but
                                                   (1 -1 3))
                                                  (("2"
                                                    (expand "Neg?")
                                                    (("2"
                                                      (expand "Lt")
                                                      (("2"
                                                        (expand
                                                         "Proper?")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (hide 1 3)
                                          (("2"
                                            (use "ulp_monotone")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "Neg?")
                                                (("2"
                                                  (expand "Lt")
                                                  (("2"
                                                    (expand "Proper?")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg? const-decl "bool" interval "interval_arith/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (Proper? const-decl "bool" interval "interval_arith/")
    (Ulp const-decl "Interval" interval_ulp nil)
    (<< const-decl "bool" interval "interval_arith/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ulp_monotone formula-decl nil interval_ulp nil)
    (Ge const-decl "bool" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ulp formal-const-decl "[real -> nonneg_real]" interval_ulp nil)
    (<= const-decl "bool" reals nil)
    (ulp_min formula-decl nil interval_ulp nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (Neg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Lt const-decl "bool" interval "interval_arith/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ulp_abs formula-decl nil interval_ulp nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Neg? const-decl "bool" interval "interval_arith/"))
   shostak))
 (Ulp_Inclusion 0
  (Ulp_Inclusion-1 nil 3682769036
   ("" (expand "Inclusion?")
    (("" (skeep)
      (("" (use "Ulp_inclusion") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval "interval_arith/")
    (PreTrue const-decl "(Precondition?)" interval_expr
     "interval_arith/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Ulp_inclusion formula-decl nil interval_ulp nil)
    (Inclusion? const-decl "bool" interval "interval_arith/"))
   nil))
 (Ulp_Fundamental 0
  (Ulp_Fundamental-1 nil 3682769036
   ("" (expand "Fundamental?")
    (("" (lemma "Ulp_fundamental")
      (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Ulp_fundamental formula-decl nil interval_ulp nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Proper? const-decl "bool" interval "interval_arith/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval "interval_arith/")
    (PreTrue const-decl "(Precondition?)" interval_expr
     "interval_arith/")
    (Ulp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp))"
     interval_ulp nil)
    (Fundamental? const-decl "bool" interval "interval_arith/"))
   nil))
 (ULP_TCC1 0
  (ULP_TCC1-1 nil 3680532741 ("" (subtype-tcc) nil nil)
   ((Ulp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp nil)
    (Ulp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp))"
     interval_ulp nil))
   nil)))

