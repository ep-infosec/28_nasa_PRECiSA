(bbiasp_sub
 (aeboundsp_sub_safe_TCC1 0
  (aeboundsp_sub_safe_TCC1-1 nil 3683989955 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/"))
   nil))
 (aeboundsp_sub_safe_TCC2 0
  (aeboundsp_sub_safe_TCC2-1 nil 3683989955 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/"))
   nil))
 (AEB_SUB_inclusion_j 0
  (AEB_SUB_inclusion_j-2 nil 3699271597
   ("" (expand "Inclusion4?")
    (("" (skeep)
      (("" (typepred "X2" "X4")
        (("" (assert)
          (("" (expand "aeboundsp_sub_safe")
            (("" (expand "aeboundsp_sub_ia")
              (("" (lift-if 1)
                (("" (split 1)
                  (("1" (flatten)
                    (("1" (hide 1) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (flatten)
                    (("2" (expand "aeboundsp_sub")
                      (("2" (use "Add_inclusion")
                        (("1" (assert)
                          (("1" (hide 4)
                            (("1" (split 1)
                              (("1"
                                (expand "sub_aerr_bound")
                                (("1"
                                  (with-tccs (use "Sub_inclusion"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (with-tccs (use "Add_inclusion"))
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (with-tccs (use "Div_inclusion"))
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (lemma "Ulp_sp_inclusion")
                                        (("1"
                                          (inst
                                           -1
                                           "Add(Abs(Sub(X1, X3)), Add(X2, X4))"
                                           "sub_ulp_bound(x1, x2, x3, x4)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (expand
                                                 "sub_ulp_bound")
                                                (("1"
                                                  (lemma
                                                   "Add_inclusion")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "Abs(Sub(X1, X3))"
                                                       "Add(X2, X4)"
                                                       "abs(x1 - x3)"
                                                       "x2 + x4")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (use
                                                               "Abs_inclusion")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (use
                                                                     "Sub_inclusion")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "Add_inclusion")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (eval-formula) nil nil)
                                       ("3"
                                        (assert)
                                        (("3" (eval-formula) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil) ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (aeboundsp_sub_ia const-decl "Interval" bbiasp_sub nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (Ge const-decl "bool" interval "interval_arith/")
    (|##| const-decl "bool" interval "interval_arith/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (aeboundsp_sub const-decl "nonneg_real" aerr754sp_sub "float/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (Ulp_sp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_sp nil)
    (Ulp_sp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_sp))"
     interval_ulp_sp nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Sub_inclusion formula-decl nil interval "interval_arith/")
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Abs_inclusion formula-decl nil interval "interval_arith/")
    (Ulp_sp_inclusion formula-decl nil interval_ulp_sp nil)
    (Div_inclusion formula-decl nil interval "interval_arith/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(single_precision_format, sp_closest?) |
         exact_rep_conservation[2]
             (single_precision_format, sp_closest?)(RtoF)}" ieee754sp
     "float/")
    (sp_closest?_j name-judgement
     "{round: RestrictedRounding[2](single_precision_format, EvenClosest?) |
         rounded_mode?(single_precision_format)(round)}" ieee754sp
     "float/")
    (sp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](single_precision_format)" ieee754sp
     "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (x2 skolem-const-decl "real" bbiasp_sub nil)
    (x4 skolem-const-decl "real" bbiasp_sub nil)
    (Add const-decl "Interval" interval "interval_arith/")
    (Div const-decl "Interval" interval "interval_arith/")
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil)
    (Abs const-decl "(NonNeg?)" interval "interval_arith/")
    (Sub const-decl "Interval" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (single_precision_format const-decl "Format" ieee754sp "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (Fbounded? const-decl "bool" float "float/")
    (sp_closest? const-decl "bool" ieee754sp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (unb_single type-eq-decl nil ieee754sp "float/")
    (closest_single? const-decl "bool" ieee754sp "float/")
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}"
     ieee754sp "float/")
    (sub_aerr_bound const-decl "nonneg_real" accum_err_sub "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (ulp_sp const-decl "nonneg_real" ieee754sp "float/")
    (sub_ulp_bound const-decl "real" accum_err_sub "float/")
    (Add_inclusion formula-decl nil interval "interval_arith/")
    (aeboundsp_sub_safe const-decl "real" bbiasp_sub nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval "interval_arith/")
    (Precondition2? const-decl "bool" interval "interval_arith/")
    (pre1to2b const-decl "(Precondition2?)" interval "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (Any? const-decl "bool" interval "interval_arith/")
    (Precondition4? const-decl "bool" interval "interval_arith/")
    (pre1to4d const-decl "(Precondition4?)" interval "interval_arith/")
    (Any3? const-decl "bool" interval "interval_arith/")
    (Inclusion4? const-decl "bool" interval "interval_arith/"))
   nil)
  (AEB_SUB_inclusion_j-1 nil 3684846155
   ("" (expand "Inclusion4?")
    (("" (skeep)
      (("" (typepred "X2" "X4")
        (("" (assert)
          (("" (expand "aeboundsp_sub_safe")
            (("" (expand "aeboundsp_sub_ia")
              (("" (lift-if 1)
                (("" (split 1)
                  (("1" (flatten)
                    (("1" (hide 1) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (flatten)
                    (("2" (expand "aeboundsp_sub")
                      (("2" (use "Add_inclusion")
                        (("1" (assert)
                          (("1" (hide 4)
                            (("1" (split 1)
                              (("1"
                                (expand "sub_aerr_bound")
                                (("1"
                                  (with-tccs (use "Sub_inclusion"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (with-tccs (use "Add_inclusion"))
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (with-tccs (use "Div_inclusion"))
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (lemma "Ulp_inclusion")
                                        (("1"
                                          (inst
                                           -1
                                           "Add(Abs(Sub(X1, X3)), Add(X2, X4))"
                                           "sub_ulp_bound(x1, x2, x3, x4)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (expand
                                                 "sub_ulp_bound")
                                                (("1"
                                                  (lemma
                                                   "Add_inclusion")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "Abs(Sub(X1, X3))"
                                                       "Add(X2, X4)"
                                                       "abs(x1 - x3)"
                                                       "x2 + x4")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (use
                                                               "Abs_inclusion")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (use
                                                                     "Sub_inclusion")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "Add_inclusion")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (eval-formula) nil nil)
                                       ("3"
                                        (assert)
                                        (("3" (eval-formula) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil) ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (Ge const-decl "bool" interval "interval_arith/")
    (|##| const-decl "bool" interval "interval_arith/")
    (aeboundsp_sub const-decl "nonneg_real" aerr754sp_sub "float/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (Sub_inclusion formula-decl nil interval "interval_arith/")
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Abs_inclusion formula-decl nil interval "interval_arith/")
    (Ulp_inclusion formula-decl nil interval_ulp nil)
    (Div_inclusion formula-decl nil interval "interval_arith/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (sp_closest?_j name-judgement
     "{round: RestrictedRounding[2](single_precision_format, EvenClosest?) |
         rounded_mode?(single_precision_format)(round)}" ieee754sp
     "float/")
    (rtos_canonic_rounding_fun_j name-judgement
     "CanonicRoundingFun[2](single_precision_format, sp_closest?)"
     ieee754sp "float/")
    (Add const-decl "Interval" interval "interval_arith/")
    (Div const-decl "Interval" interval "interval_arith/")
    (float type-eq-decl nil float "float/")
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (single_precision_format const-decl "Format" ieee754sp "float/")
    (unb_single type-eq-decl nil ieee754sp "float/")
    (StoR const-decl "real" ieee754sp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (closest_single? const-decl "bool" ieee754sp "float/")
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}"
     ieee754sp "float/")
    (min_Sulp const-decl "nonneg_real" ieee754sp "float/")
    (ulp_sp const-decl "nonneg_real" ieee754sp "float/")
    (Ulp const-decl "Interval" interval_ulp nil)
    (Abs const-decl "(NonNeg?)" interval "interval_arith/")
    (Sub const-decl "Interval" interval "interval_arith/")
    (sp_closest? const-decl "bool" ieee754sp "float/")
    (sub_aerr_bound const-decl "nonneg_real" accum_err_sub "float/")
    (sub_ulp_bound const-decl "real" accum_err_sub "float/")
    (Add_inclusion formula-decl nil interval "interval_arith/")
    (Interval type-eq-decl nil interval "interval_arith/")
    (Precondition? const-decl "bool" interval "interval_arith/")
    (Precondition2? const-decl "bool" interval "interval_arith/")
    (pre1to2b const-decl "(Precondition2?)" interval "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (Any? const-decl "bool" interval "interval_arith/")
    (Precondition4? const-decl "bool" interval "interval_arith/")
    (pre1to4d const-decl "(Precondition4?)" interval "interval_arith/")
    (Any3? const-decl "bool" interval "interval_arith/")
    (Inclusion4? const-decl "bool" interval "interval_arith/"))
   nil))
 (AEB_SUB_fundmental_j 0
  (AEB_SUB_fundmental_j-3 nil 3699283285
   ("" (expand "Fundamental4?")
    (("" (skeep)
      (("" (typepred "Y2" "Y4")
        (("" (assert)
          (("" (expand "aeboundsp_sub_ia")
            (("" (lift-if 1)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (hide -3 -4)
                    (("1" (use "Add_fundamental")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (split)
                            (("1" (use "Add_fundamental")
                              (("1" (assert) nil nil)) nil)
                             ("2" (use "Div_fundamental")
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (split)
                                    (("1"
                                      (use "Ulp_sp_proper")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (use "Ulp_sp_fundamental")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (use "Add_fundamental")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "Abs_fundamental")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (use
                                                           "Sub_fundamental")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "Add_fundamental")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (eval-formula) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (hide 2)
                    (("2" (split 1)
                      (("1" (hide-all-but (-1 -4 1))
                        (("1" (use "NonNeg_Incl")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (hide-all-but (-1 -6 1))
                        (("2" (use "NonNeg_Incl")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AEB_SUB_inclusion_j name-judgement
     "(Inclusion4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?),
             aeboundsp_sub_safe))" bbiasp_sub nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (NonNeg_Incl formula-decl nil interval "interval_arith/")
    (Add_fundamental formula-decl nil interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Sub const-decl "Interval" interval "interval_arith/")
    (Abs const-decl "(NonNeg?)" interval "interval_arith/")
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil)
    (Div const-decl "Interval" interval "interval_arith/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (Add const-decl "Interval" interval "interval_arith/")
    (Div_fundamental formula-decl nil interval "interval_arith/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (Ulp_sp_fundamental formula-decl nil interval_ulp_sp nil)
    (Sub_fundamental formula-decl nil interval "interval_arith/")
    (Abs_fundamental formula-decl nil interval "interval_arith/")
    (Ulp_sp_proper formula-decl nil interval_ulp_sp nil)
    (Incl_reflx formula-decl nil interval "interval_arith/")
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Proper_Add application-judgement "ProperInterval" interval
     "interval_arith/")
    (Ulp_sp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_sp))"
     interval_ulp_sp nil)
    (Ulp_sp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_sp nil)
    (Proper_Abs application-judgement "ProperInterval" interval
     "interval_arith/")
    (Proper_Sub application-judgement "ProperInterval" interval
     "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (aeboundsp_sub_ia const-decl "Interval" bbiasp_sub nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval "interval_arith/")
    (Precondition2? const-decl "bool" interval "interval_arith/")
    (pre1to2b const-decl "(Precondition2?)" interval "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (Any? const-decl "bool" interval "interval_arith/")
    (Precondition4? const-decl "bool" interval "interval_arith/")
    (pre1to4d const-decl "(Precondition4?)" interval "interval_arith/")
    (Any3? const-decl "bool" interval "interval_arith/")
    (Fundamental4? const-decl "bool" interval "interval_arith/"))
   nil)
  (AEB_SUB_fundmental_j-2 nil 3699277373
   ("" (expand "Fundamental4?")
    (("" (skeep)
      (("" (typepred "Y2" "Y4")
        (("" (assert)
          (("" (expand "aeboundsp_sub_ia")
            (("" (lift-if 1)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (hide -3 -4)
                    (("1" (use "Add_fundamental")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (split)
                            (("1" (use "Add_fundamental")
                              (("1" (assert) nil)))
                             ("2" (use "Div_fundamental")
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (split)
                                    (("1"
                                      (use "Ulp_proper")
                                      (("1" (assert) nil)))
                                     ("2"
                                      (use "Ulp_sp_fundamental")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (use "Add_fundamental")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "Abs_fundamental")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (use
                                                           "Sub_fundamental")
                                                          (("1"
                                                            (assert)
                                                            nil)))))))))
                                                   ("2"
                                                    (use
                                                     "Add_fundamental")
                                                    (("2"
                                                      (assert)
                                                      nil)))))))))))))))))
                                     ("3"
                                      (eval-formula)
                                      nil)))))))))))))))))))))
                 ("2" (flatten)
                  (("2" (hide 2)
                    (("2" (split 1)
                      (("1" (hide-all-but (-1 -4 1))
                        (("1" (use "NonNeg_Incl")
                          (("1" (assert) nil)))))
                       ("2" (hide-all-but (-1 -6 1))
                        (("2" (use "NonNeg_Incl")
                          (("2" (assert) nil))))))))))))))))))))))))
    nil)
   nil nil)
  (AEB_SUB_fundmental_j-1 nil 3684846155
   ("" (expand "Fundamental4?")
    (("" (skeep)
      (("" (typepred "Y2" "Y4")
        (("" (assert)
          (("" (expand "aeboundsp_sub_ia")
            (("" (lift-if 1)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (hide -3 -4)
                    (("1" (use "Add_fundamental")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (split)
                            (("1" (use "Add_fundamental")
                              (("1" (assert) nil nil)) nil)
                             ("2" (use "Div_fundamental")
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (split)
                                    (("1"
                                      (use "Ulp_proper")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (use "Ulp_fundamental")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (use "Add_fundamental")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "Abs_fundamental")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (use
                                                           "Sub_fundamental")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "Add_fundamental")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (eval-formula) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (hide 2)
                    (("2" (split 1)
                      (("1" (hide-all-but (-1 -4 1))
                        (("1" (use "NonNeg_Incl")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (hide-all-but (-1 -6 1))
                        (("2" (use "NonNeg_Incl")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (NonNeg_Incl formula-decl nil interval "interval_arith/")
    (Add_fundamental formula-decl nil interval "interval_arith/")
    (Sub const-decl "Interval" interval "interval_arith/")
    (Abs const-decl "(NonNeg?)" interval "interval_arith/")
    (Ulp const-decl "Interval" interval_ulp nil)
    (ulp_sp const-decl "nonneg_real" ieee754sp "float/")
    (min_Sulp const-decl "nonneg_real" ieee754sp "float/")
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}"
     ieee754sp "float/")
    (closest_single? const-decl "bool" ieee754sp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (StoR const-decl "real" ieee754sp "float/")
    (unb_single type-eq-decl nil ieee754sp "float/")
    (single_precision_format const-decl "Format" ieee754sp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (float type-eq-decl nil float "float/")
    (Div const-decl "Interval" interval "interval_arith/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (Add const-decl "Interval" interval "interval_arith/")
    (rtos_canonic_rounding_fun_j name-judgement
     "CanonicRoundingFun[2](single_precision_format, sp_closest?)"
     ieee754sp "float/")
    (Div_fundamental formula-decl nil interval "interval_arith/")
    (Ulp_fundamental formula-decl nil interval_ulp nil)
    (Sub_fundamental formula-decl nil interval "interval_arith/")
    (Abs_fundamental formula-decl nil interval "interval_arith/")
    (Ulp_proper formula-decl nil interval_ulp nil)
    (Incl_reflx formula-decl nil interval "interval_arith/")
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Proper_Add application-judgement "ProperInterval" interval
     "interval_arith/")
    (Proper_Abs application-judgement "ProperInterval" interval
     "interval_arith/")
    (Proper_Sub application-judgement "ProperInterval" interval
     "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (Interval type-eq-decl nil interval "interval_arith/")
    (Precondition? const-decl "bool" interval "interval_arith/")
    (Precondition2? const-decl "bool" interval "interval_arith/")
    (pre1to2b const-decl "(Precondition2?)" interval "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (Any? const-decl "bool" interval "interval_arith/")
    (Precondition4? const-decl "bool" interval "interval_arith/")
    (pre1to4d const-decl "(Precondition4?)" interval "interval_arith/")
    (Any3? const-decl "bool" interval "interval_arith/")
    (Fundamental4? const-decl "bool" interval "interval_arith/"))
   nil))
 (AEB_SUB_j 0
  (AEB_SUB_j-1 nil 3684846155 ("" (judgement-tcc) nil nil)
   ((AEB_SUB_inclusion_j name-judgement
     "(Inclusion4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?),
             aeboundsp_sub_safe))" bbiasp_sub nil)
    (AEB_SUB_fundmental_j name-judgement
     "(Fundamental4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?)))"
     bbiasp_sub nil)
    (Any3_Precondition3 name-judgement "(Precondition3?)" interval
     "interval_arith/")
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Any_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)))

