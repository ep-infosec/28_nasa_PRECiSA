(bbiasp_sqt
 (aeb_sqt_pre2_predondition_j 0
  (aeb_sqt_pre2_predondition_j-1 nil 3684857137
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (<< const-decl "bool" interval "interval_arith/")
    (Ge const-decl "bool" interval "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Sub const-decl "Interval" interval "interval_arith/")
    (aeb_sqt_pre2 const-decl "bool" bbiasp_sqt nil)
    (Precondition2? const-decl "bool" interval "interval_arith/"))
   nil))
 (AEB_SQT_inclusion_j 0
  (AEB_SQT_inclusion_j-3 nil 3699284391
   ("" (expand "Inclusion2?")
    (("" (skeep*)
      (("" (expand "aeboundsp_sqt_ia")
        (("" (expand "aeboundsp_sqt_safe")
          (("" (lift-if)
            (("" (split)
              (("1" (flatten)
                (("1" (expand "aeboundsp_sqt")
                  (("1" (use "Add_inclusion")
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (split)
                          (("1" (expand "sqt_aerr_bound")
                            (("1" (use "Sqrt_inclusion")
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (typepred "X2")
                                    (("1"
                                      (expand "aeb_sqt_pre2")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "Div_inclusion")
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (split)
                                  (("1"
                                    (lemma "Ulp_sp_inclusion")
                                    (("1"
                                      (inst
                                       -1
                                       "Sqrt(n)(Add(X1,X2))"
                                       "sqt_ulp_bound(x1, x2)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (expand "sqt_ulp_bound")
                                            (("1"
                                              (use "Sqrt_inclusion")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (typepred "X2")
                                                      (("1"
                                                        (expand
                                                         "aeb_sqt_pre2")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (use
                                                       "Add_inclusion")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (eval-formula) nil nil)
                                   ("3" (eval-formula) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (hide 2)
                  (("2" (assert)
                    (("2" (split)
                      (("1" (typepred "X2")
                        (("1" (expand "aeb_sqt_pre2")
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (typepred "X2") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (aeboundsp_sqt_safe const-decl "real" bbiasp_sqt nil)
    (aeboundsp_sqt const-decl "nonneg_real" aerr754sp_sqt "float/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (Ulp_sp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_sp nil)
    (Ulp_sp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_sp))"
     interval_ulp_sp nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Sqrt_inclusion formula-decl nil interval_sqrt "interval_arith/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (Ge const-decl "bool" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Sub const-decl "Interval" interval "interval_arith/")
    (|##| const-decl "bool" interval "interval_arith/")
    (Ulp_sp_inclusion formula-decl nil interval_ulp_sp nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Div_inclusion formula-decl nil interval "interval_arith/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(single_precision_format, sp_closest?) |
         exact_rep_conservation[2]
             (single_precision_format, sp_closest?)(RtoF)}" ieee754sp
     "float/")
    (sp_closest?_j name-judgement
     "{round: RestrictedRounding[2](single_precision_format, EvenClosest?) |
         rounded_mode?(single_precision_format)(round)}" ieee754sp
     "float/")
    (sp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](single_precision_format)" ieee754sp
     "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (x2 skolem-const-decl "real" bbiasp_sqt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (x1 skolem-const-decl "real" bbiasp_sqt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (Sqrt const-decl "(NonNeg?)" interval_sqrt "interval_arith/")
    (aeb_sqt_pre2 const-decl "bool" bbiasp_sqt nil)
    (Any? const-decl "bool" interval "interval_arith/")
    (Div const-decl "Interval" interval "interval_arith/")
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil)
    (Add const-decl "Interval" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (single_precision_format const-decl "Format" ieee754sp "float/")
    (float type-eq-decl nil float "float/")
    (Fbounded? const-decl "bool" float "float/")
    (sp_closest? const-decl "bool" ieee754sp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (unb_single type-eq-decl nil ieee754sp "float/")
    (closest_single? const-decl "bool" ieee754sp "float/")
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}"
     ieee754sp "float/")
    (sqt_aerr_bound const-decl "nonneg_real" accum_err_sqt "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (ulp_sp const-decl "nonneg_real" ieee754sp "float/")
    (sqt_ulp_bound const-decl "real" accum_err_sqt "float/")
    (Add_inclusion formula-decl nil interval "interval_arith/")
    (aeb_sqt_pre2_predondition_j name-judgement "(Precondition2?)"
     bbiasp_sqt nil)
    (aeboundsp_sqt_ia const-decl "Interval" bbiasp_sqt nil)
    (Inclusion2? const-decl "bool" interval "interval_arith/"))
   nil)
  (AEB_SQT_inclusion_j-2 nil 3684857165
   ("" (expand "Inclusion2?")
    (("" (skeep*)
      (("" (expand "aeboundsp_sqt_ia")
        (("" (expand "aeboundsp_sqt_safe")
          (("" (lift-if)
            (("" (split)
              (("1" (flatten)
                (("1" (expand "aeboundsp_sqt")
                  (("1" (use "Add_inclusion")
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (split)
                          (("1" (expand "sqt_aerr_bound")
                            (("1" (use "Sqrt_inclusion")
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (typepred "X2")
                                    (("1"
                                      (expand "aeb_sqt_pre2")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "Div_inclusion")
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (split)
                                  (("1"
                                    (lemma "Ulp_inclusion")
                                    (("1"
                                      (inst
                                       -1
                                       "Add(Abs(Sqrt(n)(X1)), Sqrt(n)(X2))"
                                       "sqt_ulp_bound(x1, x2)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (expand "sqt_ulp_bound")
                                            (("1"
                                              (use "Add_inclusion")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (lemma
                                                       "Abs_inclusion")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "Sqrt(n)(X1)"
                                                         "sqrt(x1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (use
                                                               "Sqrt_inclusion")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (typepred
                                                                     "X2")
                                                                    (("1"
                                                                      (expand
                                                                       "aeb_sqt_pre2")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3
                                                                             -4
                                                                             -5
                                                                             -6)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (use
                                                       "Sqrt_inclusion")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (hide
                                                             -1
                                                             -2
                                                             -3)
                                                            (("2"
                                                              (typepred
                                                               "X2")
                                                              (("2"
                                                                (expand
                                                                 "aeb_sqt_pre2")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (eval-formula) nil nil)
                                   ("3" (eval-formula) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (hide 2)
                  (("2" (assert)
                    (("2" (split)
                      (("1" (typepred "X2")
                        (("1" (expand "aeb_sqt_pre2")
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (typepred "X2") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((aeboundsp_sqt const-decl "nonneg_real" aerr754sp_sqt "float/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (NonNeg_Add application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (Sqrt_inclusion formula-decl nil interval_sqrt "interval_arith/")
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (Abs_inclusion formula-decl nil interval "interval_arith/")
    (Ge const-decl "bool" interval "interval_arith/")
    (Sub const-decl "Interval" interval "interval_arith/")
    (Ulp_inclusion formula-decl nil interval_ulp nil)
    (Div_inclusion formula-decl nil interval "interval_arith/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (sp_closest?_j name-judgement
     "{round: RestrictedRounding[2](single_precision_format, EvenClosest?) |
         rounded_mode?(single_precision_format)(round)}" ieee754sp
     "float/")
    (rtos_canonic_rounding_fun_j name-judgement
     "CanonicRoundingFun[2](single_precision_format, sp_closest?)"
     ieee754sp "float/")
    (Interval type-eq-decl nil interval "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (Sqrt const-decl "(NonNeg?)" interval_sqrt "interval_arith/")
    (Any? const-decl "bool" interval "interval_arith/")
    (Div const-decl "Interval" interval "interval_arith/")
    (float type-eq-decl nil float "float/")
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (single_precision_format const-decl "Format" ieee754sp "float/")
    (unb_single type-eq-decl nil ieee754sp "float/")
    (StoR const-decl "real" ieee754sp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (closest_single? const-decl "bool" ieee754sp "float/")
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}"
     ieee754sp "float/")
    (min_Sulp const-decl "nonneg_real" ieee754sp "float/")
    (ulp_sp const-decl "nonneg_real" ieee754sp "float/")
    (Ulp const-decl "Interval" interval_ulp nil)
    (Add const-decl "Interval" interval "interval_arith/")
    (Abs const-decl "(NonNeg?)" interval "interval_arith/")
    (sp_closest? const-decl "bool" ieee754sp "float/")
    (sqt_aerr_bound const-decl "nonneg_real" accum_err_sqt "float/")
    (sqt_ulp_bound const-decl "real" accum_err_sqt "float/")
    (Add_inclusion formula-decl nil interval "interval_arith/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (|##| const-decl "bool" interval "interval_arith/")
    (Inclusion2? const-decl "bool" interval "interval_arith/"))
   nil)
  (AEB_SQT_inclusion_j-1 nil 3684857137 ("" (judgement-tcc) nil nil)
   nil nil))
 (AEB_SQT_fundmental_j 0
  (AEB_SQT_fundmental_j-3 nil 3699284418
   ("" (skeep*)
    (("" (expand "Fundamental2?")
      (("" (skeep)
        (("" (expand "aeboundsp_sqt_ia")
          (("" (lift-if)
            (("" (split)
              (("1" (flatten)
                (("1" (use "Add_fundamental")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (split)
                        (("1" (use "Sqrt_fundamental")
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (expand "aeb_sqt_pre2")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (typepred "Y")
                                    (("1"
                                      (expand "aeb_sqt_pre2")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "Div_fundamental")
                          (("2" (assert)
                            (("2" (hide 2)
                              (("2"
                                (split)
                                (("1"
                                  (use "Ulp_sp_proper")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (lemma "Proper_Sqrt")
                                        (("1"
                                          (inst?)
                                          (("1" (flatten) nil nil)
                                           ("2"
                                            (expand "aeb_sqt_pre2")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (hide-all-but
                                                 (-1 -2 1))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "Ulp_sp_fundamental")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (split)
                                        (("1"
                                          (lemma "Proper_Sqrt")
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "aeb_sqt_pre2")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-1 -2 1))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "Sqrt_fundamental")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (expand "aeb_sqt_pre2")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (typepred "Y")
                                                    (("2"
                                                      (expand
                                                       "aeb_sqt_pre2")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (hide-all-but
                                                             (-1 -2 1))
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "Add_fundamental")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (eval-formula) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (hide 2)
                  (("2" (expand "aeb_sqt_pre2")
                    (("2" (split)
                      (("1" (typepred "Y")
                        (("1" (expand "aeb_sqt_pre2")
                          (("1" (flatten)
                            (("1" (hide -2 -3)
                              (("1"
                                (use "NonNeg_Incl")
                                (("1"
                                  (typepred "Y1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "X1")
                        (("2" (typepred "Y1")
                          (("2" (typepred "Y")
                            (("2" (expand "aeb_sqt_pre2")
                              (("2"
                                (flatten)
                                (("2"
                                  (use "NonNeg_Incl")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (hide -4 -5 -6)
                                          (("2"
                                            (hide -3)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Fundamental2? const-decl "bool" interval "interval_arith/")
    (aeboundsp_sqt_ia const-decl "Interval" bbiasp_sqt nil)
    (Add_fundamental formula-decl nil interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Add const-decl "Interval" interval "interval_arith/")
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil)
    (Div const-decl "Interval" interval "interval_arith/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (Any? const-decl "bool" interval "interval_arith/")
    (aeb_sqt_pre2 const-decl "bool" bbiasp_sqt nil)
    (Sqrt const-decl "(NonNeg?)" interval_sqrt "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (Div_fundamental formula-decl nil interval "interval_arith/")
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (Ulp_sp_fundamental formula-decl nil interval_ulp_sp nil)
    (Ulp_sp_proper formula-decl nil interval_ulp_sp nil)
    (X1 skolem-const-decl "ProperInterval" bbiasp_sqt nil)
    (Y1 skolem-const-decl "ProperInterval" bbiasp_sqt nil)
    (NonNegInterval type-eq-decl nil proper_arith "interval_arith/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (Proper_Sub application-judgement "ProperInterval" interval
     "interval_arith/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Ge const-decl "bool" interval "interval_arith/")
    (Sub const-decl "Interval" interval "interval_arith/")
    (Proper_Sqrt judgement-tcc nil interval_sqrt "interval_arith/")
    (Incl_reflx formula-decl nil interval "interval_arith/")
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Sqrt_fundamental formula-decl nil interval_sqrt "interval_arith/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (aeb_sqt_pre2_predondition_j name-judgement "(Precondition2?)"
     bbiasp_sqt nil)
    (Ulp_sp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_sp))"
     interval_ulp_sp nil)
    (Ulp_sp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_sp nil)
    (Proper_Add application-judgement "ProperInterval" interval
     "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (NonNeg_Incl formula-decl nil interval "interval_arith/")
    (<< const-decl "bool" interval "interval_arith/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (AEB_SQT_fundmental_j-2 nil 3684857320
   ("" (skeep*)
    (("" (expand "Fundamental2?")
      (("" (skeep)
        (("" (expand "aeboundsp_sqt_ia")
          (("" (lift-if)
            (("" (split)
              (("1" (flatten)
                (("1" (use "Add_fundamental")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (split)
                        (("1" (use "Sqrt_fundamental")
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (expand "aeb_sqt_pre2")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (typepred "Y")
                                    (("1"
                                      (expand "aeb_sqt_pre2")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "Div_fundamental")
                          (("2" (assert)
                            (("2" (hide 2)
                              (("2"
                                (split)
                                (("1"
                                  (use "Ulp_proper")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (use "Proper_Add")
                                        (("1"
                                          (lemma "Proper_Sqrt")
                                          (("1"
                                            (inst -1 "Y1" "n")
                                            (("1" (flatten) nil nil)
                                             ("2"
                                              (expand "aeb_sqt_pre2")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "Proper_Abs")
                                          (("2"
                                            (inst -1 "Sqrt(n)(X1)")
                                            (("2"
                                              (lemma "Proper_Sqrt")
                                              (("2"
                                                (inst -1 "X1" "n")
                                                (("1"
                                                  (flatten)
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "aeb_sqt_pre2")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 -2 1))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "Ulp_fundamental")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (split)
                                        (("1"
                                          (use "Proper_Add")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (lemma "Proper_Sqrt")
                                                (("1"
                                                  (inst -1 "Y1" "n")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand
                                                       "aeb_sqt_pre2")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma "Proper_Abs")
                                              (("2"
                                                (inst -1 "Sqrt(n)(X1)")
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma
                                                     "Proper_Sqrt")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "X1"
                                                       "n")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "aeb_sqt_pre2")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "Add_fundamental")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (use
                                                   "Abs_fundamental")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (lemma
                                                           "Proper_Sqrt")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "X1"
                                                             "n")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "aeb_sqt_pre2")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "Sqrt_fundamental")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "aeb_sqt_pre2")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (typepred
                                                                     "Y")
                                                                    (("2"
                                                                      (expand
                                                                       "aeb_sqt_pre2")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -3)
                                                                          (("2"
                                                                            (hide
                                                                             -4
                                                                             -5)
                                                                            (("2"
                                                                              (hide
                                                                               -3)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "Sqrt_fundamental")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "aeb_sqt_pre2")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (typepred
                                                             "Y")
                                                            (("2"
                                                              (expand
                                                               "aeb_sqt_pre2")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (eval-formula) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (hide 2)
                  (("2" (expand "aeb_sqt_pre2")
                    (("2" (split)
                      (("1" (typepred "Y")
                        (("1" (expand "aeb_sqt_pre2")
                          (("1" (flatten)
                            (("1" (hide -2 -3)
                              (("1"
                                (use "NonNeg_Incl")
                                (("1"
                                  (typepred "Y1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "X1")
                        (("2" (typepred "Y1")
                          (("2" (typepred "Y")
                            (("2" (expand "aeb_sqt_pre2")
                              (("2"
                                (flatten)
                                (("2"
                                  (use "NonNeg_Incl")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (hide -4 -5 -6)
                                          (("2"
                                            (hide -3)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Fundamental2? const-decl "bool" interval "interval_arith/")
    (Add_fundamental formula-decl nil interval "interval_arith/")
    (Abs const-decl "(NonNeg?)" interval "interval_arith/")
    (Add const-decl "Interval" interval "interval_arith/")
    (Ulp const-decl "Interval" interval_ulp nil)
    (ulp_sp const-decl "nonneg_real" ieee754sp "float/")
    (min_Sulp const-decl "nonneg_real" ieee754sp "float/")
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}"
     ieee754sp "float/")
    (closest_single? const-decl "bool" ieee754sp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (StoR const-decl "real" ieee754sp "float/")
    (unb_single type-eq-decl nil ieee754sp "float/")
    (single_precision_format const-decl "Format" ieee754sp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (float type-eq-decl nil float "float/")
    (Div const-decl "Interval" interval "interval_arith/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (Any? const-decl "bool" interval "interval_arith/")
    (Sqrt const-decl "(NonNeg?)" interval_sqrt "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (Interval type-eq-decl nil interval "interval_arith/")
    (rtos_canonic_rounding_fun_j name-judgement
     "CanonicRoundingFun[2](single_precision_format, sp_closest?)"
     ieee754sp "float/")
    (Div_fundamental formula-decl nil interval "interval_arith/")
    (Ulp_fundamental formula-decl nil interval_ulp nil)
    (Abs_fundamental formula-decl nil interval "interval_arith/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (<< const-decl "bool" interval "interval_arith/")
    (Ulp_proper formula-decl nil interval_ulp nil)
    (Proper_Abs judgement-tcc nil interval "interval_arith/")
    (Sub const-decl "Interval" interval "interval_arith/")
    (Ge const-decl "bool" interval "interval_arith/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (Proper_Sub application-judgement "ProperInterval" interval
     "interval_arith/")
    (Proper_Sqrt judgement-tcc nil interval_sqrt "interval_arith/")
    (NonNegInterval type-eq-decl nil proper_arith "interval_arith/")
    (Proper_Add judgement-tcc nil interval "interval_arith/")
    (Incl_reflx formula-decl nil interval "interval_arith/")
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Sqrt_fundamental formula-decl nil interval_sqrt "interval_arith/")
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (NonNeg_Add application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (NonNeg_Incl formula-decl nil interval "interval_arith/"))
   nil)
  (AEB_SQT_fundmental_j-1 nil 3684857137 ("" (judgement-tcc) nil nil)
   nil nil))
 (AEB_SQT_TCC1 0
  (AEB_SQT_TCC1-1 nil 3684079971 ("" (subtype-tcc) nil nil)
   ((AEB_SQT_fundmental_j application-judgement
     "(Fundamental2?(Any?, aeb_sqt_pre2))" bbiasp_sqt nil)
    (AEB_SQT_inclusion_j application-judgement
     "(Inclusion2?(Any?, aeb_sqt_pre2, aeboundsp_sqt_safe))" bbiasp_sqt
     nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)))

