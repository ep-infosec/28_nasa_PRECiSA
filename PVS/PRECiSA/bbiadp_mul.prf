(bbiadp_mul
 (aebounddp_mul_safe_TCC1 0
  (aebounddp_mul_safe_TCC1-1 nil 3683996901 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/"))
   nil))
 (aebounddp_mul_safe_TCC2 0
  (aebounddp_mul_safe_TCC2-1 nil 3683996901 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/"))
   nil))
 (AEB_MUL_inclusion_j 0
  (AEB_MUL_inclusion_j-2 nil 3699285288
   ("" (expand "Inclusion4?")
    (("" (skeep)
      (("" (expand "aebounddp_mul_safe")
        (("" (expand "aebounddp_mul_ia")
          (("" (lift-if)
            (("" (split)
              (("1" (flatten)
                (("1" (hide 1)
                  (("1" (split -1)
                    (("1" (typepred "X2") (("1" (grind) nil nil)) nil)
                     ("2" (typepred "X4") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (lift-if 3)
                  (("2" (split 3)
                    (("1" (flatten)
                      (("1" (expand "aebounddp_mul")
                        (("1" (use "Add_inclusion")
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (split)
                                (("1"
                                  (expand "mul_aerr_bound")
                                  (("1"
                                    (use "Add_inclusion")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (split)
                                          (("1"
                                            (use "Add_inclusion")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "Mult_inclusion")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (use
                                                           "Abs_inclusion")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "Mult_inclusion")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (use
                                                           "Abs_inclusion")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use "Mult_inclusion")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "Div_inclusion")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (split)
                                        (("1"
                                          (lemma "Ulp_dp_inclusion")
                                          (("1"
                                            (inst? -1 :where 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (expand
                                                   "mul_ulp_bound")
                                                  (("1"
                                                    (lemma
                                                     "Add_inclusion")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "Mult(Abs(X1), Abs(X3))"
                                                       "Add(Add(Mult(Abs(X1), X4), Mult(Abs(X3), X2)), Mult(X2, X4))"
                                                       "abs(x1) * abs(x3)"
                                                       "abs(x1) * x4 + x2 * abs(x3) + x2 * x4")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (use
                                                               "Mult_inclusion")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (use
                                                                       "Abs_inclusion")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "Abs_inclusion")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "Add_inclusion")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "Add(Mult(Abs(X1), X4), Mult(Abs(X3), X2))"
                                                                 " Mult(X2, X4)"
                                                                 "abs(x1) * x4 + x2 * abs(x3)"
                                                                 "x2 * x4")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (use
                                                                         "Add_inclusion")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             2)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (use
                                                                                 "Mult_inclusion")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (use
                                                                                       "Abs_inclusion")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (use
                                                                                 "Mult_inclusion")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "Mult_inclusion")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "Abs(X3)"
                                                                                     "X2"
                                                                                     "abs(x3)"
                                                                                     "x2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (hide
                                                                                           3)
                                                                                          (("2"
                                                                                            (use
                                                                                             "Abs_inclusion")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "Mult_inclusion")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (eval-formula) nil nil)
                                         ("3" (eval-formula) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (typepred "X2")
                        (("2" (expand "pre1to2b")
                          (("2" (typepred "X4")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((aebounddp_mul_ia const-decl "Interval" bbiadp_mul nil)
    (Any3? const-decl "bool" interval "interval_arith/")
    (pre1to4d const-decl "(Precondition4?)" interval "interval_arith/")
    (Precondition4? const-decl "bool" interval "interval_arith/")
    (Any? const-decl "bool" interval "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (pre1to2b const-decl "(Precondition2?)" interval "interval_arith/")
    (Precondition2? const-decl "bool" interval "interval_arith/")
    (Precondition? const-decl "bool" interval "interval_arith/")
    (PRED type-eq-decl nil defined_types nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (Ge const-decl "bool" interval "interval_arith/")
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Add_inclusion formula-decl nil interval "interval_arith/")
    (mul_ulp_bound const-decl "real" accum_err_mul "float/")
    (ulp_dp const-decl "nonneg_real" ieee754dp "float/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mul_aerr_bound const-decl "nonneg_real" accum_err_mul "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (dp_closest? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil)
    (Div const-decl "Interval" interval "interval_arith/")
    (Abs const-decl "(NonNeg?)" interval "interval_arith/")
    (Mult const-decl "Interval" interval "interval_arith/")
    (Add const-decl "Interval" interval "interval_arith/")
    (x4 skolem-const-decl "real" bbiadp_mul nil)
    (x2 skolem-const-decl "real" bbiadp_mul nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (dp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](double_precision_format)" ieee754dp
     "float/")
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) |
         rounded_mode?(double_precision_format)(round)}" ieee754dp
     "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Div_inclusion formula-decl nil interval "interval_arith/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (Ulp_dp_inclusion formula-decl nil interval_ulp_dp nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Abs_inclusion formula-decl nil interval "interval_arith/")
    (Mult_inclusion formula-decl nil interval "interval_arith/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (Ulp_dp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_dp))"
     interval_ulp_dp nil)
    (Ulp_dp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_dp nil)
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (aebounddp_mul_safe const-decl "real" bbiadp_mul nil)
    (Inclusion4? const-decl "bool" interval "interval_arith/"))
   nil)
  (AEB_MUL_inclusion_j-1 nil 3684758058
   ("" (expand "Inclusion4?")
    (("" (skeep)
      (("" (expand "aebounddp_mul_safe")
        (("" (expand "aebounddp_mul_ia")
          (("" (lift-if)
            (("" (split)
              (("1" (flatten)
                (("1" (hide 1)
                  (("1" (split -1)
                    (("1" (typepred "X2") (("1" (grind) nil nil)) nil)
                     ("2" (typepred "X4") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (lift-if 3)
                  (("2" (split 3)
                    (("1" (flatten)
                      (("1" (expand "aebounddp_mul")
                        (("1" (use "Add_inclusion")
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (split)
                                (("1"
                                  (expand "mul_aerr_bound")
                                  (("1"
                                    (use "Add_inclusion")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (split)
                                          (("1"
                                            (use "Add_inclusion")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "Mult_inclusion")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (use
                                                           "Abs_inclusion")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "Mult_inclusion")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (use
                                                           "Abs_inclusion")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use "Mult_inclusion")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "Div_inclusion")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (split)
                                        (("1"
                                          (lemma "Ulp_inclusion")
                                          (("1"
                                            (inst? -1 :where 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (expand
                                                   "mul_ulp_bound")
                                                  (("1"
                                                    (lemma
                                                     "Add_inclusion")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "Mult(Abs(X1), Abs(X3))"
                                                       "Add(Add(Mult(Abs(X1), X4), Mult(Abs(X3), X2)), Mult(X2, X4))"
                                                       "abs(x1) * abs(x3)"
                                                       "abs(x1) * x4 + x2 * abs(x3) + x2 * x4")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (use
                                                               "Mult_inclusion")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (use
                                                                       "Abs_inclusion")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "Abs_inclusion")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "Add_inclusion")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "Add(Mult(Abs(X1), X4), Mult(Abs(X3), X2))"
                                                                 " Mult(X2, X4)"
                                                                 "abs(x1) * x4 + x2 * abs(x3)"
                                                                 "x2 * x4")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (use
                                                                         "Add_inclusion")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             2)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (use
                                                                                 "Mult_inclusion")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (use
                                                                                       "Abs_inclusion")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (use
                                                                                 "Mult_inclusion")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "Mult_inclusion")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "Abs(X3)"
                                                                                     "X2"
                                                                                     "abs(x3)"
                                                                                     "x2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (hide
                                                                                           3)
                                                                                          (("2"
                                                                                            (use
                                                                                             "Abs_inclusion")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "Mult_inclusion")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (eval-formula) nil nil)
                                         ("3" (eval-formula) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (typepred "X2")
                        (("2" (expand "pre1to2b")
                          (("2" (typepred "X4")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Any3? const-decl "bool" interval "interval_arith/")
    (pre1to4d const-decl "(Precondition4?)" interval "interval_arith/")
    (Precondition4? const-decl "bool" interval "interval_arith/")
    (Any? const-decl "bool" interval "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (pre1to2b const-decl "(Precondition2?)" interval "interval_arith/")
    (Precondition2? const-decl "bool" interval "interval_arith/")
    (Precondition? const-decl "bool" interval "interval_arith/")
    (Interval type-eq-decl nil interval "interval_arith/")
    (|##| const-decl "bool" interval "interval_arith/")
    (Ge const-decl "bool" interval "interval_arith/")
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (Add_inclusion formula-decl nil interval "interval_arith/")
    (mul_ulp_bound const-decl "real" accum_err_mul "float/")
    (mul_aerr_bound const-decl "nonneg_real" accum_err_mul "float/")
    (dp_closest? const-decl "bool" ieee754dp "float/")
    (Ulp const-decl "Interval" interval_ulp nil)
    (ulp_dp const-decl "nonneg_real" ieee754dp "float/")
    (min_Dulp const-decl "nonneg_real" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (DtoR const-decl "real" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (float type-eq-decl nil float "float/")
    (Div const-decl "Interval" interval "interval_arith/")
    (Abs const-decl "(NonNeg?)" interval "interval_arith/")
    (Mult const-decl "Interval" interval "interval_arith/")
    (Add const-decl "Interval" interval "interval_arith/")
    (rtos_canonic_rounding_fun_j name-judgement
     "CanonicRoundingFun[2](double_precision_format, dp_closest?)"
     ieee754dp "float/")
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) |
         rounded_mode?(double_precision_format)(round)}" ieee754dp
     "float/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (Div_inclusion formula-decl nil interval "interval_arith/")
    (Ulp_inclusion formula-decl nil interval_ulp nil)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Abs_inclusion formula-decl nil interval "interval_arith/")
    (Mult_inclusion formula-decl nil interval "interval_arith/")
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (Inclusion4? const-decl "bool" interval "interval_arith/"))
   nil))
 (AEB_MUL_fundmental_j 0
  (AEB_MUL_fundmental_j-4 nil 3699285385
   ("" (expand "Fundamental4?")
    (("" (skeep)
      (("" (typepred "Y2" "Y4")
        (("" (assert)
          (("" (expand "aebounddp_mul_ia")
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (use "Add_fundamental")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (split)
                            (("1" (use "Add_fundamental")
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (split)
                                    (("1"
                                      (use "Add_fundamental")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (use "Mult_fundamental")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "Mult_fundamental")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (use
                                                           "Abs_fundamental")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (use
                                                     "Abs_fundamental")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "Mult_fundamental")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "Div_fundamental")
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (split)
                                    (("1"
                                      (use "Ulp_dp_proper")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (use "Ulp_dp_fundamental")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (use "Add_fundamental")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "Mult_fundamental")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (use
                                                             "Abs_fundamental")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "Abs_fundamental")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "Add_fundamental")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (use
                                                             "Add_fundamental")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (use
                                                                   "Mult_fundamental")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (use
                                                                           "Mult_fundamental")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (use
                                                                                 "Abs_fundamental")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (use
                                                                           "Abs_fundamental")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "Mult_fundamental")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (eval-formula) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (hide 2)
                      (("2" (split)
                        (("1" (hide-all-but (-1 -4 1))
                          (("1" (use "NonNeg_Incl")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (hide-all-but (-2 -6 1))
                          (("2" (use "NonNeg_Incl")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AEB_MUL_inclusion_j name-judgement
     "(Inclusion4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?),
             aebounddp_mul_safe))" bbiadp_mul nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (NonNeg_Incl formula-decl nil interval "interval_arith/")
    (Add_fundamental formula-decl nil interval "interval_arith/")
    (Add const-decl "Interval" interval "interval_arith/")
    (Mult const-decl "Interval" interval "interval_arith/")
    (Abs const-decl "(NonNeg?)" interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (Div const-decl "Interval" interval "interval_arith/")
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Div_fundamental formula-decl nil interval "interval_arith/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (Ulp_dp_fundamental formula-decl nil interval_ulp_dp nil)
    (Ulp_dp_proper formula-decl nil interval_ulp_dp nil)
    (Incl_reflx formula-decl nil interval "interval_arith/")
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Abs_fundamental formula-decl nil interval "interval_arith/")
    (Mult_fundamental formula-decl nil interval "interval_arith/")
    (Proper_Add application-judgement "ProperInterval" interval
     "interval_arith/")
    (Proper_Mult application-judgement "ProperInterval" interval
     "interval_arith/")
    (Proper_Abs application-judgement "ProperInterval" interval
     "interval_arith/")
    (Ulp_dp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_dp))"
     interval_ulp_dp nil)
    (Ulp_dp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_dp nil)
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (aebounddp_mul_ia const-decl "Interval" bbiadp_mul nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval "interval_arith/")
    (Precondition2? const-decl "bool" interval "interval_arith/")
    (pre1to2b const-decl "(Precondition2?)" interval "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (Any? const-decl "bool" interval "interval_arith/")
    (Precondition4? const-decl "bool" interval "interval_arith/")
    (pre1to4d const-decl "(Precondition4?)" interval "interval_arith/")
    (Any3? const-decl "bool" interval "interval_arith/")
    (Fundamental4? const-decl "bool" interval "interval_arith/"))
   nil)
  (AEB_MUL_fundmental_j-3 nil 3684758527
   ("" (expand "Fundamental4?")
    (("" (skeep)
      (("" (typepred "Y2" "Y4")
        (("" (assert)
          (("" (expand "aebounddp_mul_ia")
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (use "Add_fundamental")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (split)
                            (("1" (use "Add_fundamental")
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (split)
                                    (("1"
                                      (use "Add_fundamental")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (use "Mult_fundamental")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "Mult_fundamental")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (use
                                                           "Abs_fundamental")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (use
                                                     "Abs_fundamental")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "Mult_fundamental")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "Div_fundamental")
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (split)
                                    (("1"
                                      (use "Ulp_proper")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (use "Ulp_fundamental")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (use "Add_fundamental")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "Mult_fundamental")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (use
                                                             "Abs_fundamental")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "Abs_fundamental")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "Add_fundamental")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (use
                                                             "Add_fundamental")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (use
                                                                   "Mult_fundamental")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (use
                                                                           "Mult_fundamental")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (use
                                                                                 "Abs_fundamental")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (use
                                                                           "Abs_fundamental")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "Mult_fundamental")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (eval-formula) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (hide 2)
                      (("2" (split)
                        (("1" (hide-all-but (-1 -4 1))
                          (("1" (use "NonNeg_Incl")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (hide-all-but (-2 -6 1))
                          (("2" (use "NonNeg_Incl")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (NonNeg_Incl formula-decl nil interval "interval_arith/")
    (Add_fundamental formula-decl nil interval "interval_arith/")
    (Ulp const-decl "Interval" interval_ulp nil)
    (ulp_dp const-decl "nonneg_real" ieee754dp "float/")
    (min_Dulp const-decl "nonneg_real" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (DtoR const-decl "real" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (float type-eq-decl nil float "float/")
    (Div const-decl "Interval" interval "interval_arith/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (Abs const-decl "(NonNeg?)" interval "interval_arith/")
    (Mult const-decl "Interval" interval "interval_arith/")
    (Add const-decl "Interval" interval "interval_arith/")
    (rtos_canonic_rounding_fun_j name-judgement
     "CanonicRoundingFun[2](double_precision_format, dp_closest?)"
     ieee754dp "float/")
    (Div_fundamental formula-decl nil interval "interval_arith/")
    (Ulp_fundamental formula-decl nil interval_ulp nil)
    (Ulp_proper formula-decl nil interval_ulp nil)
    (Incl_reflx formula-decl nil interval "interval_arith/")
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Abs_fundamental formula-decl nil interval "interval_arith/")
    (Mult_fundamental formula-decl nil interval "interval_arith/")
    (Proper_Add application-judgement "ProperInterval" interval
     "interval_arith/")
    (Proper_Mult application-judgement "ProperInterval" interval
     "interval_arith/")
    (Proper_Abs application-judgement "ProperInterval" interval
     "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (Interval type-eq-decl nil interval "interval_arith/")
    (Precondition? const-decl "bool" interval "interval_arith/")
    (Precondition2? const-decl "bool" interval "interval_arith/")
    (pre1to2b const-decl "(Precondition2?)" interval "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (Any? const-decl "bool" interval "interval_arith/")
    (Precondition4? const-decl "bool" interval "interval_arith/")
    (pre1to4d const-decl "(Precondition4?)" interval "interval_arith/")
    (Any3? const-decl "bool" interval "interval_arith/")
    (Fundamental4? const-decl "bool" interval "interval_arith/"))
   nil)
  (AEB_MUL_fundmental_j-2 nil 3684758500
   ("" (expand "Fundamental")
    (("" (skeep)
      (("" (expand "aebounddp_mul_ia")
        (("" (lift-if)
          (("" (split)
            (("1" (flatten)
              (("1" (use "Add_fundamental")
                (("1" (assert)
                  (("1" (hide 2)
                    (("1" (split)
                      (("1" (use "Add_fundamental")
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (split)
                              (("1"
                                (use "Add_fundamental")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (use "Mult_fundamental")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split)
                                          (("1"
                                            (split)
                                            (("1" (propax) nil)
                                             ("2"
                                              (use "Mult_fundamental")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (use
                                                     "Abs_fundamental")
                                                    (("2"
                                                      (assert)
                                                      nil)))))))))))
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (use "Abs_fundamental")
                                              (("2"
                                                (assert)
                                                nil)))))))))))))))))
                               ("2"
                                (use "Mult_fundamental")
                                (("2" (assert) nil)))))))))))
                       ("2" (use "Div_fundamental")
                        (("2" (assert)
                          (("2" (hide 2)
                            (("2" (split)
                              (("1"
                                (use "Ulp_proper")
                                (("1" (assert) nil)))
                               ("2"
                                (use "Ulp_fundamental")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (use "Add_fundamental")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (split)
                                            (("1"
                                              (use "Mult_fundamental")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (use
                                                       "Abs_fundamental")
                                                      (("1"
                                                        (assert)
                                                        nil)))
                                                     ("2"
                                                      (use
                                                       "Abs_fundamental")
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))
                                             ("2"
                                              (use "Add_fundamental")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (use
                                                       "Add_fundamental")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (use
                                                             "Mult_fundamental")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "Mult_fundamental")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (use
                                                                           "Abs_fundamental")
                                                                          (("2"
                                                                            (assert)
                                                                            nil)))))))))))
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (use
                                                                     "Abs_fundamental")
                                                                    (("2"
                                                                      (assert)
                                                                      nil)))))))))))))))))
                                                     ("2"
                                                      (use
                                                       "Mult_fundamental")
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))))))))))))))))
                               ("3"
                                (eval-formula)
                                nil)))))))))))))))))))
             ("2" (flatten)
              (("2" (hide 2)
                (("2" (split)
                  (("1" (typepred "Y2")
                    (("1" (assert)
                      (("1" (hide-all-but (-1 -3 1))
                        (("1" (use "NonNeg_Incl")
                          (("1" (assert) nil)))))))))
                   ("2" (typepred "Y4")
                    (("2" (assert)
                      (("2" (hide-all-but (-1 -5 1))
                        (("2" (use "NonNeg_Incl")
                          (("2" (assert) nil))))))))))))))))))))))))
    nil)
   nil nil)
  (AEB_MUL_fundmental_j-1 nil 3684758058 ("" (judgement-tcc) nil nil)
   nil nil))
 (AEB_MUL_j 0
  (AEB_MUL_j-1 nil 3684758436 ("" (assert) nil nil)
   ((Any_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Any3_Precondition3 name-judgement "(Precondition3?)" interval
     "interval_arith/")
    (AEB_MUL_fundmental_j name-judgement
     "(Fundamental4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?)))"
     bbiadp_mul nil)
    (AEB_MUL_inclusion_j name-judgement
     "(Inclusion4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?),
             aebounddp_mul_safe))" bbiadp_mul nil))
   nil))
 (aebounddp_mul_p2l_safe_TCC1 0
  (aebounddp_mul_p2l_safe_TCC1-1 nil 3718988954
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/"))
   nil))
 (AEB_MUL_P2L_inclusion_j 0
  (AEB_MUL_P2L_inclusion_j-1 nil 3718988954
   ("" (skeep)
    (("" (expand "Inclusion?")
      (("" (skeep)
        (("" (expand "aebounddp_mul_p2l_safe")
          (("" (expand "aebounddp_mul_p2l_ia")
            (("" (lift-if 1)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (hide 1)
                    (("1" (typepred "X") (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "aebounddp_mul_p2l")
                    (("2" (lemma "Mult_inclusion")
                      (("2" (inst? -1 :where 2)
                        (("2" (split -1)
                          (("1" (propax) nil nil)
                           ("2" (use "r2i_sharp_eq")
                            (("2" (assert) nil nil)) nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Inclusion? const-decl "bool" interval "interval_arith/")
    (aebounddp_mul_p2l_safe const-decl "real" bbiadp_mul nil)
    (Mult_inclusion formula-decl nil interval "interval_arith/")
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (r2i_sharp_eq formula-decl nil interval "interval_arith/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (aebounddp_mul_p2l const-decl "nonneg_real" aerr754dp_mul "float/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (Ge const-decl "bool" interval "interval_arith/")
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (aebounddp_mul_p2l_ia const-decl "Interval" bbiadp_mul nil))
   nil))
 (AEB_MUL_P2L_j 0
  (AEB_MUL_P2L_j-1 nil 3718989436
   ("" (skeep)
    (("" (split 1)
      (("1" (assert) nil nil)
       ("2" (expand "Fundamental?")
        (("2" (skeep)
          (("2" (expand "aebounddp_mul_p2l_ia")
            (("2" (lift-if 1)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (use "Mult_fundamental")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (typepred "X")
                    (("2" (hide 2)
                      (("2" (use "NonNeg_Incl")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (AEB_MUL_P2L_inclusion_j application-judgement
     "(Inclusion?(NonNeg?, aebounddp_mul_p2l_safe(n)))" bbiadp_mul nil)
    (NonNeg_Incl formula-decl nil interval "interval_arith/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Incl_reflx formula-decl nil interval "interval_arith/")
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (Proper_Mult application-judgement "ProperInterval" interval
     "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (Mult_fundamental formula-decl nil interval "interval_arith/")
    (aebounddp_mul_p2l_ia const-decl "Interval" bbiadp_mul nil)
    (Fundamental? const-decl "bool" interval "interval_arith/"))
   nil))
 (AEB_MUL_P2R_inclusion_j 0
  (AEB_MUL_P2R_inclusion_j-1 nil 3718989876
   ("" (skeep)
    (("" (expand "Inclusion?")
      (("" (skeep)
        (("" (expand "aebounddp_mul_p2r_safe")
          (("" (expand "aebounddp_mul_p2r_ia")
            (("" (lift-if 1)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (hide 1)
                    (("1" (typepred "X") (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "aebounddp_mul_p2r")
                    (("2" (lemma "Mult_inclusion")
                      (("2" (inst? -1 :where -2)
                        (("2" (inst -1 "[|2^n|]" "2^n")
                          (("2" (assert)
                            (("2" (use "r2i_sharp_eq")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Inclusion? const-decl "bool" interval "interval_arith/")
    (aebounddp_mul_p2r_safe const-decl "real" bbiadp_mul nil)
    (Mult_inclusion formula-decl nil interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (r2i_sharp_eq formula-decl nil interval "interval_arith/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (aebounddp_mul_p2r const-decl "nonneg_real" aerr754dp_mul "float/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (Ge const-decl "bool" interval "interval_arith/")
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (aebounddp_mul_p2r_ia const-decl "Interval" bbiadp_mul nil))
   nil))
 (AEB_MUL_P2R_j 0
  (AEB_MUL_P2R_j-1 nil 3718989876
   ("" (skeep)
    (("" (split 1)
      (("1" (assert) nil nil)
       ("2" (expand "Fundamental?")
        (("2" (skeep)
          (("2" (expand "aebounddp_mul_p2r_ia")
            (("2" (lift-if 1)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (use "Mult_fundamental")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (typepred "X")
                    (("2" (hide 2)
                      (("2" (use "NonNeg_Incl")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (AEB_MUL_P2R_inclusion_j application-judgement
     "(Inclusion?(NonNeg?, aebounddp_mul_p2r_safe(n)))" bbiadp_mul nil)
    (NonNeg_Incl formula-decl nil interval "interval_arith/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Incl_reflx formula-decl nil interval "interval_arith/")
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (Proper_Mult application-judgement "ProperInterval" interval
     "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Mult_fundamental formula-decl nil interval "interval_arith/")
    (aebounddp_mul_p2r_ia const-decl "Interval" bbiadp_mul nil)
    (Fundamental? const-decl "bool" interval "interval_arith/"))
   nil)))

